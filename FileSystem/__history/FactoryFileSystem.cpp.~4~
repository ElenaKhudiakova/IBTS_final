//---------------------------------------------------------------------------

#pragma hdrstop

#include "FactoryFileSystem.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)

AbstractFileSystem CreateFileSystem(FSType Type, HANDLE FileHandle) {
	AbstractFileSystem FileSystem;
	switch (Type) {
	case FSType::NTFS:
		FileSystem = new NTFS(FileHandle);
		break;
	case FSType::exFAT:
		FileSystem = exFAT(FileHandle);
		break;
	}

	return FileSystem;
}


FSType FindFileSystemType(HANDLE FileHandle) {
	char dataBuffer[512];
	// Позиционируемся в файле
	LARGE_INTEGER sectorOffset;
	// Смещение от начала кластера
	sectorOffset.QuadPart = 0;

	// Задаём позицию
	DWORD currentPosition = SetFilePointer(
		FileHandle,
		sectorOffset.LowPart,
		&sectorOffset.HighPart,
		FILE_BEGIN
	);

	if (currentPosition != sectorOffset.LowPart) {
		return NULL;
	}

	DWORD bytesToRead = 512;				// Сколько байтов нужно прочитать
	DWORD bytesRead; 	    				// Сколько байтов удалось считать

	// Чтение данных
	bool readResult = ReadFile(
		FileHandle,
		dataBuffer,
		bytesToRead,
		&bytesRead,
		NULL
	);

	if (!(readResult && bytesRead == bytesToRead)) {
		return NULL;
	}

	// Если в загрузочном секторе встретится ключевое слово
	if (strstr(dataBuffer, "NTFS") != 0) {
		return FSType::NTFS;
	}

	if (strstr(dataBuffer, "EXFAT") != 0) {
		return FSType::exFAT;
	}
}
